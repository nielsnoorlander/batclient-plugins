package biz.noorlander.batclient.ui;

import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;

public class AnimistFrame {
    private JPanel animistPanel;
    private BatGauge soulHpGauge;

    private void createUIComponents() {
        soulHpGauge = new BatGauge(new Dimension(240, 50), 100, "%", new Color(20, 253, 0));
        soulHpGauge.addBoundary(80, new Color(20, 253, 0));
        soulHpGauge.addBoundary(90, new Color(59, 154, 51));
        soulHpGauge.addBoundary(100, new Color(20, 253, 0));
        soulHpGauge.setValue(75);
    }

    public JPanel getPanel() {
        return animistPanel;
    }

    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        // This method is invoked on the EDT thread
        JFrame frame = new JFrame("Swing and JavaFX");
        final JFXPanel fxPanel = new JFXPanel();
        frame.add(fxPanel);
        frame.setSize(200, 150);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                try {
                    initFX(fxPanel);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }
    private static void initFX(JFXPanel fxPanel) throws IOException {
        // This method is invoked on the JavaFX thread
        Parent root = FXMLLoader.load(SoulPanelController.class.getResource("/biz/noorlander/batclient/ui/soulPanel.fxml"));
        Scene scene = new Scene(root);
        fxPanel.setScene(scene);
    }

    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        animistPanel = new JPanel();
        animistPanel.setLayout(new GridBagLayout());
        final JFXPanel jFXPanel1 = new JFXPanel();
        jFXPanel1.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        animistPanel.add(jFXPanel1, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        animistPanel.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        animistPanel.add(spacer2, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return animistPanel;
    }

}
